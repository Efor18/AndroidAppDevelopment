//https://github.com/marcoRS/volley-examples/blob/master/config/quality.gradle

buildscript {
    dependencies {
        // include gradle android plugin
        classpath 'com.android.tools.build:gradle:1.0.0'
        // support for code generation tools (eg. dagger, android annotations)
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'
        // support for robolectric tests
        classpath 'com.github.jcandksolutions.gradle:android-unit-test:2.0.2'
    }
}

apply plugin: 'com.android.application'

// using dagger to wire the main modules together
ext.androidPackageName = 'com.example.app'
apply from: '../Scripts/dagger.gradle'

// create separated coverage reports for robolectric integration tests
apply from: '../Scripts/jacoco-support-app-module.gradle'

android {
    // applications version properties
    defaultConfig {
        applicationId 'com.example.app'
        versionCode 1
        versionName "0.0.1-SNAPSHOT"
        minSdkVersion 14

        // use espresso test runner for instrumented android tests
        testInstrumentationRunner "com.google.android.apps.common.testing.testrunner.GoogleInstrumentationTestRunner"
    }

    compileSdkVersion 21
    buildToolsVersion '21.1.1'

    buildTypes {
        release {
            minifyEnabled true
            proguardFile 'proguard-project.txt'
        }
        debug {
            minifyEnabled false
            testCoverageEnabled = true
        }
    }

    // replace the #const_wiremock_ip# with your current ip address for test with wiremock
    applicationVariants.all { variant ->
        variant.mergeResources.doLast {
            def localIp = obtainCurrentIpAddress()
            File valuesFile = file("${buildDir}/intermediates/res/release/values/values.xml")
            if (valuesFile.exists()) {
                String content = valuesFile.getText('UTF-8')
                content = content.replaceAll("#const_wiremock_ip#", localIp)
                valuesFile.write(content, 'UTF-8')
            }
        }
    }

    // avoid errors with annoying message 'Duplicate files copied in APK ...'
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }
}

// add robolectric support after android {} configurations
apply plugin: 'android-unit-test'

dependencies {
    // project main modules
    compile project(":Presentation")
    compile project(":Domain")
    compile project(":Data")

    // framework and tools for testing android related code inside jvm
    testCompile project(":TestSupportRobolectric")
    // TODO necessary for robolectric tests?
    compile 'com.android.support:support-v4:20.0.0'

    // framework for instrumented android tests
    androidTestCompile('com.jakewharton.espresso:espresso:1.1-r3') {
        exclude group: 'com.squareup.dagger' // TODO why exclude
    }
}

// TODO make it more stable. until there when you have an issue ...
// - at multiple lan connections disconnect all other and rm intermediates/res/release/values/values.xml
// - do same when your ip changed.
def obtainCurrentIpAddress() {
    InetAddress inetAddr = InetAddress.getLocalHost();

    byte[] addr = inetAddr.getAddress();
    String ipAddr = "";
    for (int i = 0; i < addr.length; i++) {
        if (i > 0) {
            ipAddr += ".";
        }
        ipAddr += addr[i] & 0xFF;
    }
    ipAddr
}

// perhaps will may be used to check if wiremock is running for automated tests
Process p1 = Runtime.getRuntime().exec("ping -c 1 www.google.com");
int returnVal = p1.waitFor();
boolean reachable = (returnVal == 0);
println "Internet is reachable $reachable"