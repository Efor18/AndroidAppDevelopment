//https://github.com/marcoRS/volley-examples/blob/master/config/quality.gradle

buildscript {
    dependencies {
        classpath "com.android.tools.build:gradle:" + androidToolsBuildGradle
        classpath "com.neenbedankt.gradle.plugins:android-apt:1.2"
        classpath 'com.github.jcandksolutions.gradle:android-unit-test:1.6.3'
    }
}

apply plugin: 'com.android.application'
apply from: '../Scripts/dagger.gradle'

android {

    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidBuildToolsVersion

    defaultConfig {
        testInstrumentationRunner "com.google.android.apps.common.testing.testrunner.GoogleInstrumentationTestRunner"
    }

    buildTypes {
        release {
            runProguard true
            proguardFile 'proguard-project.txt'
        }
        debug {
            runProguard false
            testCoverageEnabled = true
        }
    }

    sourceSets.main {
        // src/gen is the target for generated content like json model
        java.srcDirs += 'build/generated/source/db'
    }

    // replace the #const_wiremock_ip# with your current ip address for test with wiremock
    applicationVariants.all { variant ->
        variant.mergeResources.doLast {
            def localIp = obtainCurrentIpAddress()
            File valuesFile = file("${buildDir}/intermediates/res/release/values/values.xml")
            if (valuesFile.exists()) {
                String content = valuesFile.getText('UTF-8')
                content = content.replaceAll("#const_wiremock_ip#", localIp)
                valuesFile.write(content, 'UTF-8')
            }
        }
    }

    // avoid errors with message 'Duplicate files copied in APK ...'
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }
}

apply plugin: 'android-unit-test'

dependencies {

    compile project(":Presentation")
    compile project(":Domain")
    compile project(":Data")

    //noinspection GradleDependency
    compile 'com.android.support:support-v4:20.0.0'

    testCompile project(":TestSupportRobolectric")

    androidTestCompile 'com.google.guava:guava:14.0.1',
            'org.hamcrest:hamcrest-integration:1.1',
            'org.hamcrest:hamcrest-core:1.1',
            'org.hamcrest:hamcrest-library:1.1'

    androidTestCompile ('com.jakewharton.espresso:espresso:1.1-r3') {
        exclude group: 'com.squareup.dagger'
    }
}

apply plugin: 'android-apt'

dependencies {
    apt "org.androidannotations:androidannotations:" + androidAnnotationsVersion
    compile("org.androidannotations:androidannotations-api:" + androidAnnotationsAPIVersion)
}

apt {
    arguments {
        androidManifestFile variant.processResources.manifestFile
        resourcePackageName 'com.example.app'
    }
}

def obtainCurrentIpAddress() {
    InetAddress inetAddr = InetAddress.getLocalHost();

    byte[] addr = inetAddr.getAddress();
    String ipAddr = "";
    for (int i = 0; i < addr.length; i++) {
        if (i > 0) {
            ipAddr += ".";
        }
        ipAddr += addr[i] & 0xFF;
    }
    ipAddr
}

// will be necessary when wiremock is used, to check if running
Process p1 = Runtime.getRuntime().exec("ping -c 1 www.google.com");
int returnVal = p1.waitFor();
boolean reachable = (returnVal == 0);
println "Internet is reachable $reachable"

//apply from: '../Scripts/coveralls-support.gradle'
