subprojects {
    apply plugin: "jacoco"
    test {
        // Don't instrument and generate code coverage unless "-Pcodecoverage" is set on the command line
        jacoco {
            enabled = project.hasProperty("codecoverage")
        }
    }
}
repositories {
    mavenCentral()
}
configurations {
    jacoco {
        description "JARs required for doing our own JacocoReport tasks"
    }
}
dependencies {
    jacoco 'org.jacoco:org.jacoco.ant:0.7.2.201409121644'
}

def coverageSourceDirs = [
//        'App/src/main/java',
'Data/src/main/java',
'DataNetwork/src/main/java',
'DataNetwork/build/source/apt/debug',
'DataNetworkJson/gen',
'DataRepository/src/main/java',
'Domain/src/main/java',
'DomainInteractor/src/main/java',
'Presentation/src/main/java']

task jacocoReport(type: JacocoReport) {
    //classDirectories  = fileTree(dir: 'App/build/intermediates/classes/debug', exclude: 'com/example/**/R.class')
    classDirectories  = fileTree(dir: 'DataNetworkJson/build/classes/main')
    classDirectories += fileTree(dir: 'DataNetwork/build/intermediates/classes/debug').matching { exclude '**/R.class', '**/R\$*.class', '**/*InjectAdapter.class', '**/BuildConfig.class' }
    classDirectories += fileTree(dir: 'Data/build/intermediates/classes/debug').matching { exclude '**/*_.class', '**/R.class', '**/R\$*.class', '**/*InjectAdapter.class', '**/BuildConfig.class' }
    classDirectories += fileTree(dir: 'DataRepository/build/intermediates/classes/debug').matching { exclude '**/*_.class', '**/R.class', '**/R\$*.class', '**/*InjectAdapter.class', '**/BuildConfig.class'  }
    classDirectories += fileTree(dir: 'Domain/build/intermediates/classes/debug').matching { exclude '**/*_.class', '**/R.class', '**/R\$*.class', '**/*InjectAdapter.class', '**/BuildConfig.class'  }
    classDirectories += fileTree(dir: 'DomainInteractor/build/intermediates/classes/debug').matching { exclude '**/*_.class', '**/R.class', '**/R\$*.class', '**/*InjectAdapter.class', '**/BuildConfig.class'  }
    classDirectories += fileTree(dir: 'Presentation/build/intermediates/classes/debug').matching { exclude '**/*_.class', '**/R.class', '**/R\$*.class', '**/*InjectAdapter.class', '**/BuildConfig.class'  }
    jacocoClasspath = configurations.jacoco
    // Add execution data from all subprojects
    executionData fileTree(project.rootDir.absolutePath).include("*/build/jacoco/*.exec").exclude("App/build/jacoco/*.exec")
    // Add source classes from all subprojects
    subprojects.each {
        sourceSets it.sourceSets.main
    }

    additionalSourceDirs = files(coverageSourceDirs)

    // Make the aggregate report go in a top-level directory somewhere
    reports {
        html {
            enabled true
            destination "build/reports/jacoco/test"
        }
        xml {
            enabled true
            destination "build/reports/jacoco/test/jacocoTestReport.xml"
        }
    }

    // fix issue with double $$ at generate report task
    doFirst {
        new File('App/build/intermediates/classes/').eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
        new File('Domain/build/intermediates/classes/').eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
        new File('Presentation/build/intermediates/classes/').eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
    // avoid some side effects through revert renaming
    doLast {
        new File('App/build/intermediates/classes/').eachFileRecurse { file ->
            if (file.name.contains('$ModuleAdapter')) {
                file.renameTo(file.path.replace('$ModuleAdapter', '$$ModuleAdapter'))
            }
        }
        new File('Domain/build/intermediates/classes/').eachFileRecurse { file ->
            if (file.name.contains('$ModuleAdapter')) {
                file.renameTo(file.path.replace('$ModuleAdapter', '$$ModuleAdapter'))
            }
        }
        new File('Presentation/build/intermediates/classes/').eachFileRecurse { file ->
            if (file.name.contains('$ModuleAdapter')) {
                file.renameTo(file.path.replace('$ModuleAdapter', '$$ModuleAdapter'))
            }
        }
    }
}

apply plugin: 'com.github.kt3k.coveralls'

coveralls {
    project.extensions.coveralls.sourceDirs += coverageSourceDirs
}